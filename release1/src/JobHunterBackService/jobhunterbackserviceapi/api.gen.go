// Package jobhunterbackserviceapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package jobhunterbackserviceapi

import (
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ApplicationStageBaseStatus.
const (
	ApplicationStageBaseStatusActive  ApplicationStageBaseStatus = "active"
	ApplicationStageBaseStatusBlocked ApplicationStageBaseStatus = "blocked"
	ApplicationStageBaseStatusDeleted ApplicationStageBaseStatus = "deleted"
	ApplicationStageBaseStatusFailed  ApplicationStageBaseStatus = "failed"
	ApplicationStageBaseStatusPassed  ApplicationStageBaseStatus = "passed"
	ApplicationStageBaseStatusWaiting ApplicationStageBaseStatus = "waiting"
)

// Defines values for ApplicationStageResponseStatus.
const (
	ApplicationStageResponseStatusActive  ApplicationStageResponseStatus = "active"
	ApplicationStageResponseStatusBlocked ApplicationStageResponseStatus = "blocked"
	ApplicationStageResponseStatusDeleted ApplicationStageResponseStatus = "deleted"
	ApplicationStageResponseStatusFailed  ApplicationStageResponseStatus = "failed"
	ApplicationStageResponseStatusPassed  ApplicationStageResponseStatus = "passed"
	ApplicationStageResponseStatusWaiting ApplicationStageResponseStatus = "waiting"
)

// Defines values for JobSearchingProcessBaseJobTypes.
const (
	JobSearchingProcessBaseJobTypesContract JobSearchingProcessBaseJobTypes = "contract"
	JobSearchingProcessBaseJobTypesFullTime JobSearchingProcessBaseJobTypes = "full-time"
	JobSearchingProcessBaseJobTypesPartTime JobSearchingProcessBaseJobTypes = "part-time"
)

// Defines values for JobSearchingProcessResponseJobTypes.
const (
	JobSearchingProcessResponseJobTypesContract JobSearchingProcessResponseJobTypes = "contract"
	JobSearchingProcessResponseJobTypesFullTime JobSearchingProcessResponseJobTypes = "full-time"
	JobSearchingProcessResponseJobTypesPartTime JobSearchingProcessResponseJobTypes = "part-time"
)

// Defines values for JobSearchingProcessResponseStatus.
const (
	JobSearchingProcessResponseStatusActive   JobSearchingProcessResponseStatus = "active"
	JobSearchingProcessResponseStatusArchived JobSearchingProcessResponseStatus = "archived"
	JobSearchingProcessResponseStatusDeleted  JobSearchingProcessResponseStatus = "deleted"
	JobSearchingProcessResponseStatusFinished JobSearchingProcessResponseStatus = "finished"
)

// Defines values for OfferBaseJobTypes.
const (
	OfferBaseJobTypesContract OfferBaseJobTypes = "contract"
	OfferBaseJobTypesFullTime OfferBaseJobTypes = "full-time"
	OfferBaseJobTypesPartTime OfferBaseJobTypes = "part-time"
)

// Defines values for OfferResponseJobTypes.
const (
	OfferResponseJobTypesContract OfferResponseJobTypes = "contract"
	OfferResponseJobTypesFullTime OfferResponseJobTypes = "full-time"
	OfferResponseJobTypesPartTime OfferResponseJobTypes = "part-time"
)

// Defines values for VacancyBaseJobType.
const (
	VacancyBaseJobTypeContract VacancyBaseJobType = "contract"
	VacancyBaseJobTypeFullTime VacancyBaseJobType = "full-time"
	VacancyBaseJobTypePartTime VacancyBaseJobType = "part-time"
)

// Defines values for VacancyResponseJobType.
const (
	VacancyResponseJobTypeContract VacancyResponseJobType = "contract"
	VacancyResponseJobTypeFullTime VacancyResponseJobType = "full-time"
	VacancyResponseJobTypePartTime VacancyResponseJobType = "part-time"
)

// Defines values for VacancyResponseStatus.
const (
	VacancyResponseStatusActive  VacancyResponseStatus = "active"
	VacancyResponseStatusDeleted VacancyResponseStatus = "deleted"
	VacancyResponseStatusFailed  VacancyResponseStatus = "failed"
	VacancyResponseStatusSuccess VacancyResponseStatus = "success"
)

// Defines values for PostUserApplicationStagesJSONBodyStatus.
const (
	PostUserApplicationStagesJSONBodyStatusActive  PostUserApplicationStagesJSONBodyStatus = "active"
	PostUserApplicationStagesJSONBodyStatusBlocked PostUserApplicationStagesJSONBodyStatus = "blocked"
	PostUserApplicationStagesJSONBodyStatusDeleted PostUserApplicationStagesJSONBodyStatus = "deleted"
	PostUserApplicationStagesJSONBodyStatusFailed  PostUserApplicationStagesJSONBodyStatus = "failed"
	PostUserApplicationStagesJSONBodyStatusPassed  PostUserApplicationStagesJSONBodyStatus = "passed"
	PostUserApplicationStagesJSONBodyStatusWaiting PostUserApplicationStagesJSONBodyStatus = "waiting"
)

// Defines values for PatchUserJobSearchingProcessesJobSearchingProcessIdJSONBody1Status.
const (
	PatchUserJobSearchingProcessesJobSearchingProcessIdJSONBody1StatusActive   PatchUserJobSearchingProcessesJobSearchingProcessIdJSONBody1Status = "active"
	PatchUserJobSearchingProcessesJobSearchingProcessIdJSONBody1StatusArchived PatchUserJobSearchingProcessesJobSearchingProcessIdJSONBody1Status = "archived"
	PatchUserJobSearchingProcessesJobSearchingProcessIdJSONBody1StatusDeleted  PatchUserJobSearchingProcessesJobSearchingProcessIdJSONBody1Status = "deleted"
	PatchUserJobSearchingProcessesJobSearchingProcessIdJSONBody1StatusFinished PatchUserJobSearchingProcessesJobSearchingProcessIdJSONBody1Status = "finished"
)

// Defines values for PostUserVacanciesJSONBodyJobType.
const (
	Contract PostUserVacanciesJSONBodyJobType = "contract"
	FullTime PostUserVacanciesJSONBodyJobType = "full-time"
	PartTime PostUserVacanciesJSONBodyJobType = "part-time"
)

// HRContactBase defines model for HRContactBase.
type HRContactBase struct {
	Messenger *Messenger `json:"messenger,omitempty"`

	// Preferable if true then contact is preferable
	Preferable *bool   `json:"preferable,omitempty"`
	Value      *string `json:"value,omitempty"`
}

// HRContactResponse defines model for HRContactResponse.
type HRContactResponse struct {
	CreationDate *time.Time         `json:"creationDate,omitempty"`
	Id           openapi_types.UUID `json:"id"`

	// IsDeleted true=deleted
	IsDeleted *bool      `json:"isDeleted,omitempty"`
	Messenger *Messenger `json:"messenger,omitempty"`

	// Preferable if true then contact is preferable
	Preferable *bool      `json:"preferable,omitempty"`
	UpdateDate *time.Time `json:"updateDate,omitempty"`
	Value      *string    `json:"value,omitempty"`
}

// HRManagerBase defines model for HRManagerBase.
type HRManagerBase struct {
	FirstName  string  `json:"firstName"`
	LastName   *string `json:"lastName,omitempty"`
	SecondName *string `json:"secondName,omitempty"`
}

// HRManagerResponse defines model for HRManagerResponse.
type HRManagerResponse struct {
	CreationDate *time.Time         `json:"creationDate,omitempty"`
	Employer     *EmployerResponse  `json:"employer,omitempty"`
	FirstName    string             `json:"firstName"`
	Id           openapi_types.UUID `json:"id"`

	// IsDeleted true=deleted
	IsDeleted  *bool      `json:"isDeleted,omitempty"`
	LastName   *string    `json:"lastName,omitempty"`
	SecondName *string    `json:"secondName,omitempty"`
	UpdateDate *time.Time `json:"updateDate,omitempty"`
}

// ApplicationStageBase defines model for applicationStageBase.
type ApplicationStageBase struct {
	Name        string                     `json:"name"`
	OrderNumber *float32                   `json:"orderNumber"`
	Status      ApplicationStageBaseStatus `json:"status"`
}

// ApplicationStageBaseStatus defines model for ApplicationStageBase.Status.
type ApplicationStageBaseStatus string

// ApplicationStageResponse defines model for applicationStageResponse.
type ApplicationStageResponse struct {
	Id          *openapi_types.UUID            `json:"id,omitempty"`
	Name        string                         `json:"name"`
	OrderNumber *float32                       `json:"orderNumber"`
	Status      ApplicationStageResponseStatus `json:"status"`
}

// ApplicationStageResponseStatus defines model for ApplicationStageResponse.Status.
type ApplicationStageResponseStatus string

// CommonEntity defines model for commonEntity.
type CommonEntity struct {
	CreationDate *time.Time         `json:"creationDate,omitempty"`
	Id           openapi_types.UUID `json:"id"`
	UpdateDate   *time.Time         `json:"updateDate,omitempty"`
}

// Country defines model for country.
type Country struct {
	Code *string             `json:"code,omitempty"`
	Id   *openapi_types.UUID `json:"id,omitempty"`
	Name *string             `json:"name,omitempty"`
}

// Currency defines model for currency.
type Currency struct {
	Id        *openapi_types.UUID `json:"id,omitempty"`
	IsoCode   *string             `json:"isoCode,omitempty"`
	Name      *string             `json:"name,omitempty"`
	ShortName *string             `json:"shortName,omitempty"`
}

// EmployerBase defines model for employerBase.
type EmployerBase struct {
	// Locations list of employer's countries
	Locations *[]Country `json:"locations,omitempty"`
	Name      string     `json:"name"`
}

// EmployerResponse defines model for employerResponse.
type EmployerResponse struct {
	CreationDate *time.Time         `json:"creationDate,omitempty"`
	Id           openapi_types.UUID `json:"id"`

	// Locations list of employer's countries
	Locations  *[]Country `json:"locations,omitempty"`
	Name       string     `json:"name"`
	UpdateDate *time.Time `json:"updateDate,omitempty"`
}

// JobSearchingProcessBase defines model for jobSearchingProcessBase.
type JobSearchingProcessBase struct {
	Currency *Currency `json:"currency,omitempty"`

	// JobTypes job type array that is prefered by user
	JobTypes *[]JobSearchingProcessBaseJobTypes `json:"jobTypes,omitempty"`

	// Locations array of countries are selected by user
	Locations            *[]Country `json:"locations,omitempty"`
	MaximumMonthlySalary *float32   `json:"maximumMonthlySalary,omitempty"`
	MinimumMonthlySalary *float32   `json:"minimumMonthlySalary,omitempty"`
	Name                 *string    `json:"name,omitempty"`
	Position             *string    `json:"position,omitempty"`
}

// JobSearchingProcessBaseJobTypes defines model for JobSearchingProcessBase.JobTypes.
type JobSearchingProcessBaseJobTypes string

// JobSearchingProcessResponse defines model for jobSearchingProcessResponse.
type JobSearchingProcessResponse struct {
	CreatedUser  *openapi_types.UUID `json:"createdUser,omitempty"`
	CreationDate *time.Time          `json:"creationDate,omitempty"`
	Currency     *Currency           `json:"currency,omitempty"`
	Id           openapi_types.UUID  `json:"id"`

	// JobTypes job type array that is prefered by user
	JobTypes *[]JobSearchingProcessResponseJobTypes `json:"jobTypes,omitempty"`

	// Locations array of countries are selected by user
	Locations            *[]Country                         `json:"locations,omitempty"`
	MaximumMonthlySalary *float32                           `json:"maximumMonthlySalary,omitempty"`
	MinimumMonthlySalary *float32                           `json:"minimumMonthlySalary,omitempty"`
	Name                 *string                            `json:"name,omitempty"`
	Position             *string                            `json:"position,omitempty"`
	Status               *JobSearchingProcessResponseStatus `json:"status,omitempty"`
	UpdateDate           *time.Time                         `json:"updateDate,omitempty"`
}

// JobSearchingProcessResponseJobTypes defines model for JobSearchingProcessResponse.JobTypes.
type JobSearchingProcessResponseJobTypes string

// JobSearchingProcessResponseStatus defines model for JobSearchingProcessResponse.Status.
type JobSearchingProcessResponseStatus string

// Messenger defines model for messenger.
type Messenger struct {
	Code *string             `json:"code,omitempty"`
	Id   *openapi_types.UUID `json:"id,omitempty"`
	Name *string             `json:"name,omitempty"`
}

// OfferBase defines model for offerBase.
type OfferBase struct {
	Comments       *string  `json:"comments,omitempty"`
	ContractLength *float32 `json:"contractLength,omitempty"`

	// JobTypes job type array that is prefered by user
	JobTypes      *[]OfferBaseJobTypes `json:"jobTypes,omitempty"`
	MonthlySalary *float32             `json:"monthlySalary,omitempty"`
	Position      *string              `json:"position,omitempty"`
}

// OfferBaseJobTypes defines model for OfferBase.JobTypes.
type OfferBaseJobTypes string

// OfferResponse defines model for offerResponse.
type OfferResponse struct {
	Comments       *string            `json:"comments,omitempty"`
	ContractLength *float32           `json:"contractLength,omitempty"`
	CreationDate   *time.Time         `json:"creationDate,omitempty"`
	Id             openapi_types.UUID `json:"id"`

	// IsDeleted true = deleted
	IsDeleted *bool `json:"isDeleted,omitempty"`

	// JobTypes job type array that is prefered by user
	JobTypes      *[]OfferResponseJobTypes `json:"jobTypes,omitempty"`
	MonthlySalary *float32                 `json:"monthlySalary,omitempty"`
	Position      *string                  `json:"position,omitempty"`
	UpdateDate    *time.Time               `json:"updateDate,omitempty"`
}

// OfferResponseJobTypes defines model for OfferResponse.JobTypes.
type OfferResponseJobTypes string

// VacancyBase defines model for vacancyBase.
type VacancyBase struct {
	ApplicationDate *time.Time           `json:"applicationDate,omitempty"`
	Benefits        *string              `json:"benefits"`
	Comments        *string              `json:"comments"`
	ContractLength  *float32             `json:"contractLength"`
	Currency        *Currency            `json:"currency,omitempty"`
	Department      *string              `json:"department"`
	Employer        VacancyBase_Employer `json:"employer"`

	// JobType job type of the vacancy
	JobType *[]VacancyBaseJobType `json:"jobType,omitempty"`

	// Locations array of countries are selected by user
	Locations            *[]Country `json:"locations,omitempty"`
	MaximumMonthlySalary *float32   `json:"maximumMonthlySalary,omitempty"`
	MinimumMonthlySalary *float32   `json:"minimumMonthlySalary,omitempty"`
	Name                 string     `json:"name"`
	Offer                *OfferBase `json:"offer,omitempty"`
	OpenDate             *time.Time `json:"openDate,omitempty"`
	Position             string     `json:"position"`
	Responsibilities     *string    `json:"responsibilities"`
}

// VacancyBaseEmployer1 defines model for .
type VacancyBaseEmployer1 struct {
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Locations list of employer's countries
	Locations *[]Country `json:"locations,omitempty"`
	Name      string     `json:"name"`
}

// VacancyBase_Employer defines model for VacancyBase.Employer.
type VacancyBase_Employer struct {
	union json.RawMessage
}

// VacancyBaseJobType defines model for VacancyBase.JobType.
type VacancyBaseJobType string

// VacancyId defines model for vacancyId.
type VacancyId struct {
	VacancyIdentifier openapi_types.UUID `json:"vacancyIdentifier"`
}

// VacancyResponse defines model for vacancyResponse.
type VacancyResponse struct {
	ApplicationDate *time.Time         `json:"applicationDate,omitempty"`
	Benefits        *string            `json:"benefits"`
	Comments        *string            `json:"comments"`
	ContractLength  *float32           `json:"contractLength"`
	CreationDate    *time.Time         `json:"creationDate,omitempty"`
	Currency        *Currency          `json:"currency,omitempty"`
	Department      *string            `json:"department"`
	Employer        EmployerResponse   `json:"employer"`
	Id              openapi_types.UUID `json:"id"`

	// JobType job type of the vacancy
	JobType *[]VacancyResponseJobType `json:"jobType,omitempty"`

	// Locations array of countries are selected by user
	Locations            *[]Country             `json:"locations,omitempty"`
	MaximumMonthlySalary *float32               `json:"maximumMonthlySalary,omitempty"`
	MinimumMonthlySalary *float32               `json:"minimumMonthlySalary,omitempty"`
	Name                 string                 `json:"name"`
	Offer                *OfferBase             `json:"offer,omitempty"`
	OpenDate             *time.Time             `json:"openDate,omitempty"`
	Position             string                 `json:"position"`
	Responsibilities     *string                `json:"responsibilities"`
	Status               *VacancyResponseStatus `json:"status,omitempty"`
	UpdateDate           *time.Time             `json:"updateDate,omitempty"`
}

// VacancyResponseJobType defines model for VacancyResponse.JobType.
type VacancyResponseJobType string

// VacancyResponseStatus defines model for VacancyResponse.Status.
type VacancyResponseStatus string

// HRManagerId defines model for HRManagerId.
type HRManagerId = openapi_types.UUID

// ApplicationStageId defines model for applicationStageId.
type ApplicationStageId = openapi_types.UUID

// ContactId defines model for contactId.
type ContactId = openapi_types.UUID

// CountryId defines model for countryId.
type CountryId = openapi_types.UUID

// EmployerId defines model for employerId.
type EmployerId = openapi_types.UUID

// VacancyIdParam defines model for vacancyIdParam.
type VacancyIdParam = openapi_types.UUID

// PostUserHRManagersJSONBody defines parameters for PostUserHRManagers.
type PostUserHRManagersJSONBody struct {
	FirstName  string  `json:"firstName"`
	LastName   *string `json:"lastName,omitempty"`
	SecondName *string `json:"secondName,omitempty"`
}

// PostUserHRManagersHRManagerIdContactsJSONBody defines parameters for PostUserHRManagersHRManagerIdContacts.
type PostUserHRManagersHRManagerIdContactsJSONBody struct {
	Contacts *[]HRContactBase `json:"contacts,omitempty"`
}

// PostUserApplicationStagesJSONBody defines parameters for PostUserApplicationStages.
type PostUserApplicationStagesJSONBody struct {
	Name              string                                  `json:"name"`
	OrderNumber       *float32                                `json:"orderNumber"`
	Status            PostUserApplicationStagesJSONBodyStatus `json:"status"`
	VacancyIdentifier openapi_types.UUID                      `json:"vacancyIdentifier"`
}

// PostUserApplicationStagesJSONBodyStatus defines parameters for PostUserApplicationStages.
type PostUserApplicationStagesJSONBodyStatus string

// PatchUserJobSearchingProcessesJobSearchingProcessIdJSONBody defines parameters for PatchUserJobSearchingProcessesJobSearchingProcessId.
type PatchUserJobSearchingProcessesJobSearchingProcessIdJSONBody struct {
	union json.RawMessage
}

// PatchUserJobSearchingProcessesJobSearchingProcessIdJSONBody1 defines parameters for PatchUserJobSearchingProcessesJobSearchingProcessId.
type PatchUserJobSearchingProcessesJobSearchingProcessIdJSONBody1 struct {
	Status *PatchUserJobSearchingProcessesJobSearchingProcessIdJSONBody1Status `json:"status,omitempty"`
}

// PatchUserJobSearchingProcessesJobSearchingProcessIdJSONBody1Status defines parameters for PatchUserJobSearchingProcessesJobSearchingProcessId.
type PatchUserJobSearchingProcessesJobSearchingProcessIdJSONBody1Status string

// PostUserVacanciesJSONBody defines parameters for PostUserVacancies.
type PostUserVacanciesJSONBody struct {
	ApplicationDate       *time.Time                         `json:"applicationDate,omitempty"`
	Benefits              *string                            `json:"benefits"`
	Comments              *string                            `json:"comments"`
	ContractLength        *float32                           `json:"contractLength"`
	Currency              *Currency                          `json:"currency,omitempty"`
	Department            *string                            `json:"department"`
	Employer              PostUserVacanciesJSONBody_Employer `json:"employer"`
	JobSearchingProcessId *openapi_types.UUID                `json:"jobSearchingProcessId,omitempty"`

	// JobType job type of the vacancy
	JobType *[]PostUserVacanciesJSONBodyJobType `json:"jobType,omitempty"`

	// Locations array of countries are selected by user
	Locations            *[]Country `json:"locations,omitempty"`
	MaximumMonthlySalary *float32   `json:"maximumMonthlySalary,omitempty"`
	MinimumMonthlySalary *float32   `json:"minimumMonthlySalary,omitempty"`
	Name                 string     `json:"name"`
	Offer                *OfferBase `json:"offer,omitempty"`
	OpenDate             *time.Time `json:"openDate,omitempty"`
	Position             string     `json:"position"`
	Responsibilities     *string    `json:"responsibilities"`
}

// PostUserVacanciesJSONBodyEmployer1 defines parameters for PostUserVacancies.
type PostUserVacanciesJSONBodyEmployer1 struct {
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Locations list of employer's countries
	Locations *[]Country `json:"locations,omitempty"`
	Name      string     `json:"name"`
}

// PostUserVacanciesJSONBody_Employer defines parameters for PostUserVacancies.
type PostUserVacanciesJSONBody_Employer struct {
	union json.RawMessage
}

// PostUserVacanciesJSONBodyJobType defines parameters for PostUserVacancies.
type PostUserVacanciesJSONBodyJobType string

// PatchUserHRMAnagersHRManagerIdJSONRequestBody defines body for PatchUserHRMAnagersHRManagerId for application/json ContentType.
type PatchUserHRMAnagersHRManagerIdJSONRequestBody = HRManagerBase

// PostUserHRManagersJSONRequestBody defines body for PostUserHRManagers for application/json ContentType.
type PostUserHRManagersJSONRequestBody PostUserHRManagersJSONBody

// PostUserHRManagersHRManagerIdContactsJSONRequestBody defines body for PostUserHRManagersHRManagerIdContacts for application/json ContentType.
type PostUserHRManagersHRManagerIdContactsJSONRequestBody PostUserHRManagersHRManagerIdContactsJSONBody

// PatchUserHRManagersHRManagerIdContactsContactIdJSONRequestBody defines body for PatchUserHRManagersHRManagerIdContactsContactId for application/json ContentType.
type PatchUserHRManagersHRManagerIdContactsContactIdJSONRequestBody = HRContactBase

// PostUserApplicationStagesJSONRequestBody defines body for PostUserApplicationStages for application/json ContentType.
type PostUserApplicationStagesJSONRequestBody PostUserApplicationStagesJSONBody

// PatchUserApplicationStagesApplicationStageIdJSONRequestBody defines body for PatchUserApplicationStagesApplicationStageId for application/json ContentType.
type PatchUserApplicationStagesApplicationStageIdJSONRequestBody = ApplicationStageBase

// PostUserEmployersJSONRequestBody defines body for PostUserEmployers for application/json ContentType.
type PostUserEmployersJSONRequestBody = EmployerBase

// PatchUserEmployersEmployerIdJSONRequestBody defines body for PatchUserEmployersEmployerId for application/json ContentType.
type PatchUserEmployersEmployerIdJSONRequestBody = EmployerBase

// PostUserJobSearchingProcessesJSONRequestBody defines body for PostUserJobSearchingProcesses for application/json ContentType.
type PostUserJobSearchingProcessesJSONRequestBody = JobSearchingProcessBase

// PatchUserJobSearchingProcessesJobSearchingProcessIdJSONRequestBody defines body for PatchUserJobSearchingProcessesJobSearchingProcessId for application/json ContentType.
type PatchUserJobSearchingProcessesJobSearchingProcessIdJSONRequestBody PatchUserJobSearchingProcessesJobSearchingProcessIdJSONBody

// PostUserVacanciesJSONRequestBody defines body for PostUserVacancies for application/json ContentType.
type PostUserVacanciesJSONRequestBody PostUserVacanciesJSONBody

// PatchUserVacanciesVacancyIdParamJSONRequestBody defines body for PatchUserVacanciesVacancyIdParam for application/json ContentType.
type PatchUserVacanciesVacancyIdParamJSONRequestBody = VacancyBase

// AsEmployerBase returns the union data inside the VacancyBase_Employer as a EmployerBase
func (t VacancyBase_Employer) AsEmployerBase() (EmployerBase, error) {
	var body EmployerBase
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromEmployerBase overwrites any union data inside the VacancyBase_Employer as the provided EmployerBase
func (t *VacancyBase_Employer) FromEmployerBase(v EmployerBase) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeEmployerBase performs a merge with any union data inside the VacancyBase_Employer, using the provided EmployerBase
func (t *VacancyBase_Employer) MergeEmployerBase(v EmployerBase) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVacancyBaseEmployer1 returns the union data inside the VacancyBase_Employer as a VacancyBaseEmployer1
func (t VacancyBase_Employer) AsVacancyBaseEmployer1() (VacancyBaseEmployer1, error) {
	var body VacancyBaseEmployer1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVacancyBaseEmployer1 overwrites any union data inside the VacancyBase_Employer as the provided VacancyBaseEmployer1
func (t *VacancyBase_Employer) FromVacancyBaseEmployer1(v VacancyBaseEmployer1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVacancyBaseEmployer1 performs a merge with any union data inside the VacancyBase_Employer, using the provided VacancyBaseEmployer1
func (t *VacancyBase_Employer) MergeVacancyBaseEmployer1(v VacancyBaseEmployer1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VacancyBase_Employer) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VacancyBase_Employer) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get list of all countries
	// (GET /countries)
	GetCountries(w http.ResponseWriter, r *http.Request)
	// Get specific country
	// (GET /countries/{countryId})
	GetCountriesCountryId(w http.ResponseWriter, r *http.Request, countryId CountryId)
	// Get the list of currencies
	// (GET /currencies)
	GetCurrencies(w http.ResponseWriter, r *http.Request)
	// Get the list of currencies
	// (GET /currencies/{currencyId})
	GetCurrenciesCurrencyId(w http.ResponseWriter, r *http.Request, currencyId openapi_types.UUID)
	// Get the list of Messangers
	// (GET /Messangers)
	GetMessangers(w http.ResponseWriter, r *http.Request)
	// Delete specific HRManager
	// (DELETE /user/HRMAnagers/{HRManagerId})
	DeleteUserHRMAnagersHRManagerId(w http.ResponseWriter, r *http.Request, hrManagerId HRManagerId)
	// Get specific HRManager of the vacancy
	// (GET /user/HRMAnagers/{HRManagerId})
	GetUserHRMAnagersHRManagerId(w http.ResponseWriter, r *http.Request, hrManagerId HRManagerId)
	// Update specific HRManager of the vacancy
	// (PATCH /user/HRMAnagers/{HRManagerId})
	PatchUserHRMAnagersHRManagerId(w http.ResponseWriter, r *http.Request, hrManagerId HRManagerId)
	// Creates a new HRManager
	// (POST /user/HRManagers)
	PostUserHRManagers(w http.ResponseWriter, r *http.Request)
	// Returns list of contacts of the HRManager
	// (GET /user/HRManagers/{HRManagerId}/contacts)
	GetUserHRManagersHRManagerIdContacts(w http.ResponseWriter, r *http.Request, hrManagerId HRManagerId)
	// creates a new HRManager contact
	// (POST /user/HRManagers/{HRManagerId}/contacts)
	PostUserHRManagersHRManagerIdContacts(w http.ResponseWriter, r *http.Request, hrManagerId HRManagerId)
	// deletes the existing HRManager's contact
	// (DELETE /user/HRManagers/{HRManagerId}/contacts/{contactId})
	DeleteUserHRManagersHRManagerIdContactsContactId(w http.ResponseWriter, r *http.Request, hrManagerId HRManagerId, contactId ContactId)
	// Returns specific contact of the HRManager
	// (GET /user/HRManagers/{HRManagerId}/contacts/{contactId})
	GetUserHRManagersHRManagerIdContactsContactId(w http.ResponseWriter, r *http.Request, hrManagerId HRManagerId, contactId ContactId)
	// updates a new HRManager contact
	// (PATCH /user/HRManagers/{HRManagerId}/contacts/{contactId})
	PatchUserHRManagersHRManagerIdContactsContactId(w http.ResponseWriter, r *http.Request, hrManagerId HRManagerId, contactId ContactId)
	// Create a new applicationStage
	// (POST /user/applicationStages)
	PostUserApplicationStages(w http.ResponseWriter, r *http.Request)
	// update applicationStage
	// (DELETE /user/applicationStages/{applicationStageId})
	DeleteUserApplicationStagesApplicationStageId(w http.ResponseWriter, r *http.Request, applicationStageId ApplicationStageId)
	// update status of applicationStage
	// (PATCH /user/applicationStages/{applicationStageId})
	PatchUserApplicationStagesApplicationStageId(w http.ResponseWriter, r *http.Request, applicationStageId ApplicationStageId)
	// Create a new employer
	// (POST /user/employers)
	PostUserEmployers(w http.ResponseWriter, r *http.Request)
	// Deletes the existing employer
	// (DELETE /user/employers/{employerId})
	DeleteUserEmployersEmployerId(w http.ResponseWriter, r *http.Request, employerId EmployerId)
	// Updates the existing employer
	// (PATCH /user/employers/{employerId})
	PatchUserEmployersEmployerId(w http.ResponseWriter, r *http.Request, employerId EmployerId)
	// Returns a list of jobSearchingProcesses associated with current user
	// (GET /user/jobSearchingProcesses)
	GetUserJobSearchingProcesses(w http.ResponseWriter, r *http.Request)
	// create a new jobSearchingProcess
	// (POST /user/jobSearchingProcesses)
	PostUserJobSearchingProcesses(w http.ResponseWriter, r *http.Request)
	// delete the existing jobSearchingProcess
	// (DELETE /user/jobSearchingProcesses/{jobSearchingProcessId})
	DeleteUserJobSearchingProcessesJobSearchingProcessId(w http.ResponseWriter, r *http.Request, jobSearchingProcessId openapi_types.UUID)
	// Get properties of a specified jobSearchingProcess
	// (GET /user/jobSearchingProcesses/{jobSearchingProcessId})
	GetUserJobSearchingProcessesJobSearchingProcessId(w http.ResponseWriter, r *http.Request, jobSearchingProcessId string)
	// update existing jobSearchingProcess
	// (PATCH /user/jobSearchingProcesses/{jobSearchingProcessId})
	PatchUserJobSearchingProcessesJobSearchingProcessId(w http.ResponseWriter, r *http.Request, jobSearchingProcessId string)
	// create a new vacancy
	// (POST /user/vacancies)
	PostUserVacancies(w http.ResponseWriter, r *http.Request)
	// delete specific vacancy
	// (DELETE /user/vacancies/{vacancyIdParam})
	DeleteUserVacanciesVacancyIdParam(w http.ResponseWriter, r *http.Request, vacancyIdParam VacancyIdParam)
	// Get specified vacancy
	// (GET /user/vacancies/{vacancyIdParam})
	GetUserVacanciesVacancyIdParam(w http.ResponseWriter, r *http.Request, vacancyIdParam VacancyIdParam)
	// Update the existing vacancy
	// (PATCH /user/vacancies/{vacancyIdParam})
	PatchUserVacanciesVacancyIdParam(w http.ResponseWriter, r *http.Request, vacancyIdParam VacancyIdParam)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get list of all countries
// (GET /countries)
func (_ Unimplemented) GetCountries(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get specific country
// (GET /countries/{countryId})
func (_ Unimplemented) GetCountriesCountryId(w http.ResponseWriter, r *http.Request, countryId CountryId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the list of currencies
// (GET /currencies)
func (_ Unimplemented) GetCurrencies(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the list of currencies
// (GET /currencies/{currencyId})
func (_ Unimplemented) GetCurrenciesCurrencyId(w http.ResponseWriter, r *http.Request, currencyId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get the list of Messangers
// (GET /Messangers)
func (_ Unimplemented) GetMessangers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete specific HRManager
// (DELETE /user/HRMAnagers/{HRManagerId})
func (_ Unimplemented) DeleteUserHRMAnagersHRManagerId(w http.ResponseWriter, r *http.Request, hrManagerId HRManagerId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get specific HRManager of the vacancy
// (GET /user/HRMAnagers/{HRManagerId})
func (_ Unimplemented) GetUserHRMAnagersHRManagerId(w http.ResponseWriter, r *http.Request, hrManagerId HRManagerId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update specific HRManager of the vacancy
// (PATCH /user/HRMAnagers/{HRManagerId})
func (_ Unimplemented) PatchUserHRMAnagersHRManagerId(w http.ResponseWriter, r *http.Request, hrManagerId HRManagerId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Creates a new HRManager
// (POST /user/HRManagers)
func (_ Unimplemented) PostUserHRManagers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Returns list of contacts of the HRManager
// (GET /user/HRManagers/{HRManagerId}/contacts)
func (_ Unimplemented) GetUserHRManagersHRManagerIdContacts(w http.ResponseWriter, r *http.Request, hrManagerId HRManagerId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// creates a new HRManager contact
// (POST /user/HRManagers/{HRManagerId}/contacts)
func (_ Unimplemented) PostUserHRManagersHRManagerIdContacts(w http.ResponseWriter, r *http.Request, hrManagerId HRManagerId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// deletes the existing HRManager's contact
// (DELETE /user/HRManagers/{HRManagerId}/contacts/{contactId})
func (_ Unimplemented) DeleteUserHRManagersHRManagerIdContactsContactId(w http.ResponseWriter, r *http.Request, hrManagerId HRManagerId, contactId ContactId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Returns specific contact of the HRManager
// (GET /user/HRManagers/{HRManagerId}/contacts/{contactId})
func (_ Unimplemented) GetUserHRManagersHRManagerIdContactsContactId(w http.ResponseWriter, r *http.Request, hrManagerId HRManagerId, contactId ContactId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// updates a new HRManager contact
// (PATCH /user/HRManagers/{HRManagerId}/contacts/{contactId})
func (_ Unimplemented) PatchUserHRManagersHRManagerIdContactsContactId(w http.ResponseWriter, r *http.Request, hrManagerId HRManagerId, contactId ContactId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new applicationStage
// (POST /user/applicationStages)
func (_ Unimplemented) PostUserApplicationStages(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// update applicationStage
// (DELETE /user/applicationStages/{applicationStageId})
func (_ Unimplemented) DeleteUserApplicationStagesApplicationStageId(w http.ResponseWriter, r *http.Request, applicationStageId ApplicationStageId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// update status of applicationStage
// (PATCH /user/applicationStages/{applicationStageId})
func (_ Unimplemented) PatchUserApplicationStagesApplicationStageId(w http.ResponseWriter, r *http.Request, applicationStageId ApplicationStageId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new employer
// (POST /user/employers)
func (_ Unimplemented) PostUserEmployers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Deletes the existing employer
// (DELETE /user/employers/{employerId})
func (_ Unimplemented) DeleteUserEmployersEmployerId(w http.ResponseWriter, r *http.Request, employerId EmployerId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Updates the existing employer
// (PATCH /user/employers/{employerId})
func (_ Unimplemented) PatchUserEmployersEmployerId(w http.ResponseWriter, r *http.Request, employerId EmployerId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Returns a list of jobSearchingProcesses associated with current user
// (GET /user/jobSearchingProcesses)
func (_ Unimplemented) GetUserJobSearchingProcesses(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// create a new jobSearchingProcess
// (POST /user/jobSearchingProcesses)
func (_ Unimplemented) PostUserJobSearchingProcesses(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// delete the existing jobSearchingProcess
// (DELETE /user/jobSearchingProcesses/{jobSearchingProcessId})
func (_ Unimplemented) DeleteUserJobSearchingProcessesJobSearchingProcessId(w http.ResponseWriter, r *http.Request, jobSearchingProcessId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get properties of a specified jobSearchingProcess
// (GET /user/jobSearchingProcesses/{jobSearchingProcessId})
func (_ Unimplemented) GetUserJobSearchingProcessesJobSearchingProcessId(w http.ResponseWriter, r *http.Request, jobSearchingProcessId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// update existing jobSearchingProcess
// (PATCH /user/jobSearchingProcesses/{jobSearchingProcessId})
func (_ Unimplemented) PatchUserJobSearchingProcessesJobSearchingProcessId(w http.ResponseWriter, r *http.Request, jobSearchingProcessId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// create a new vacancy
// (POST /user/vacancies)
func (_ Unimplemented) PostUserVacancies(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// delete specific vacancy
// (DELETE /user/vacancies/{vacancyIdParam})
func (_ Unimplemented) DeleteUserVacanciesVacancyIdParam(w http.ResponseWriter, r *http.Request, vacancyIdParam VacancyIdParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get specified vacancy
// (GET /user/vacancies/{vacancyIdParam})
func (_ Unimplemented) GetUserVacanciesVacancyIdParam(w http.ResponseWriter, r *http.Request, vacancyIdParam VacancyIdParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update the existing vacancy
// (PATCH /user/vacancies/{vacancyIdParam})
func (_ Unimplemented) PatchUserVacanciesVacancyIdParam(w http.ResponseWriter, r *http.Request, vacancyIdParam VacancyIdParam) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetCountries operation middleware
func (siw *ServerInterfaceWrapper) GetCountries(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCountries(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCountriesCountryId operation middleware
func (siw *ServerInterfaceWrapper) GetCountriesCountryId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "countryId" -------------
	var countryId CountryId

	err = runtime.BindStyledParameterWithOptions("simple", "countryId", chi.URLParam(r, "countryId"), &countryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "countryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCountriesCountryId(w, r, countryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCurrencies operation middleware
func (siw *ServerInterfaceWrapper) GetCurrencies(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCurrencies(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetCurrenciesCurrencyId operation middleware
func (siw *ServerInterfaceWrapper) GetCurrenciesCurrencyId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "currencyId" -------------
	var currencyId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "currencyId", chi.URLParam(r, "currencyId"), &currencyId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "currencyId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCurrenciesCurrencyId(w, r, currencyId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMessangers operation middleware
func (siw *ServerInterfaceWrapper) GetMessangers(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMessangers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUserHRMAnagersHRManagerId operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserHRMAnagersHRManagerId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "HRManagerId" -------------
	var hrManagerId HRManagerId

	err = runtime.BindStyledParameterWithOptions("simple", "HRManagerId", chi.URLParam(r, "HRManagerId"), &hrManagerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "HRManagerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUserHRMAnagersHRManagerId(w, r, hrManagerId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserHRMAnagersHRManagerId operation middleware
func (siw *ServerInterfaceWrapper) GetUserHRMAnagersHRManagerId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "HRManagerId" -------------
	var hrManagerId HRManagerId

	err = runtime.BindStyledParameterWithOptions("simple", "HRManagerId", chi.URLParam(r, "HRManagerId"), &hrManagerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "HRManagerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserHRMAnagersHRManagerId(w, r, hrManagerId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchUserHRMAnagersHRManagerId operation middleware
func (siw *ServerInterfaceWrapper) PatchUserHRMAnagersHRManagerId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "HRManagerId" -------------
	var hrManagerId HRManagerId

	err = runtime.BindStyledParameterWithOptions("simple", "HRManagerId", chi.URLParam(r, "HRManagerId"), &hrManagerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "HRManagerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchUserHRMAnagersHRManagerId(w, r, hrManagerId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostUserHRManagers operation middleware
func (siw *ServerInterfaceWrapper) PostUserHRManagers(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUserHRManagers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserHRManagersHRManagerIdContacts operation middleware
func (siw *ServerInterfaceWrapper) GetUserHRManagersHRManagerIdContacts(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "HRManagerId" -------------
	var hrManagerId HRManagerId

	err = runtime.BindStyledParameterWithOptions("simple", "HRManagerId", chi.URLParam(r, "HRManagerId"), &hrManagerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "HRManagerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserHRManagersHRManagerIdContacts(w, r, hrManagerId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostUserHRManagersHRManagerIdContacts operation middleware
func (siw *ServerInterfaceWrapper) PostUserHRManagersHRManagerIdContacts(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "HRManagerId" -------------
	var hrManagerId HRManagerId

	err = runtime.BindStyledParameterWithOptions("simple", "HRManagerId", chi.URLParam(r, "HRManagerId"), &hrManagerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "HRManagerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUserHRManagersHRManagerIdContacts(w, r, hrManagerId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUserHRManagersHRManagerIdContactsContactId operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserHRManagersHRManagerIdContactsContactId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "HRManagerId" -------------
	var hrManagerId HRManagerId

	err = runtime.BindStyledParameterWithOptions("simple", "HRManagerId", chi.URLParam(r, "HRManagerId"), &hrManagerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "HRManagerId", Err: err})
		return
	}

	// ------------- Path parameter "contactId" -------------
	var contactId ContactId

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", chi.URLParam(r, "contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "contactId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUserHRManagersHRManagerIdContactsContactId(w, r, hrManagerId, contactId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserHRManagersHRManagerIdContactsContactId operation middleware
func (siw *ServerInterfaceWrapper) GetUserHRManagersHRManagerIdContactsContactId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "HRManagerId" -------------
	var hrManagerId HRManagerId

	err = runtime.BindStyledParameterWithOptions("simple", "HRManagerId", chi.URLParam(r, "HRManagerId"), &hrManagerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "HRManagerId", Err: err})
		return
	}

	// ------------- Path parameter "contactId" -------------
	var contactId ContactId

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", chi.URLParam(r, "contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "contactId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserHRManagersHRManagerIdContactsContactId(w, r, hrManagerId, contactId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchUserHRManagersHRManagerIdContactsContactId operation middleware
func (siw *ServerInterfaceWrapper) PatchUserHRManagersHRManagerIdContactsContactId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "HRManagerId" -------------
	var hrManagerId HRManagerId

	err = runtime.BindStyledParameterWithOptions("simple", "HRManagerId", chi.URLParam(r, "HRManagerId"), &hrManagerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "HRManagerId", Err: err})
		return
	}

	// ------------- Path parameter "contactId" -------------
	var contactId ContactId

	err = runtime.BindStyledParameterWithOptions("simple", "contactId", chi.URLParam(r, "contactId"), &contactId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "contactId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchUserHRManagersHRManagerIdContactsContactId(w, r, hrManagerId, contactId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostUserApplicationStages operation middleware
func (siw *ServerInterfaceWrapper) PostUserApplicationStages(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUserApplicationStages(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUserApplicationStagesApplicationStageId operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserApplicationStagesApplicationStageId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "applicationStageId" -------------
	var applicationStageId ApplicationStageId

	err = runtime.BindStyledParameterWithOptions("simple", "applicationStageId", chi.URLParam(r, "applicationStageId"), &applicationStageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "applicationStageId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUserApplicationStagesApplicationStageId(w, r, applicationStageId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchUserApplicationStagesApplicationStageId operation middleware
func (siw *ServerInterfaceWrapper) PatchUserApplicationStagesApplicationStageId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "applicationStageId" -------------
	var applicationStageId ApplicationStageId

	err = runtime.BindStyledParameterWithOptions("simple", "applicationStageId", chi.URLParam(r, "applicationStageId"), &applicationStageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "applicationStageId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchUserApplicationStagesApplicationStageId(w, r, applicationStageId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostUserEmployers operation middleware
func (siw *ServerInterfaceWrapper) PostUserEmployers(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUserEmployers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUserEmployersEmployerId operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserEmployersEmployerId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "employerId" -------------
	var employerId EmployerId

	err = runtime.BindStyledParameterWithOptions("simple", "employerId", chi.URLParam(r, "employerId"), &employerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "employerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUserEmployersEmployerId(w, r, employerId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchUserEmployersEmployerId operation middleware
func (siw *ServerInterfaceWrapper) PatchUserEmployersEmployerId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "employerId" -------------
	var employerId EmployerId

	err = runtime.BindStyledParameterWithOptions("simple", "employerId", chi.URLParam(r, "employerId"), &employerId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "employerId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchUserEmployersEmployerId(w, r, employerId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserJobSearchingProcesses operation middleware
func (siw *ServerInterfaceWrapper) GetUserJobSearchingProcesses(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserJobSearchingProcesses(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostUserJobSearchingProcesses operation middleware
func (siw *ServerInterfaceWrapper) PostUserJobSearchingProcesses(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUserJobSearchingProcesses(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUserJobSearchingProcessesJobSearchingProcessId operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserJobSearchingProcessesJobSearchingProcessId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "jobSearchingProcessId" -------------
	var jobSearchingProcessId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "jobSearchingProcessId", chi.URLParam(r, "jobSearchingProcessId"), &jobSearchingProcessId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "jobSearchingProcessId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUserJobSearchingProcessesJobSearchingProcessId(w, r, jobSearchingProcessId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserJobSearchingProcessesJobSearchingProcessId operation middleware
func (siw *ServerInterfaceWrapper) GetUserJobSearchingProcessesJobSearchingProcessId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "jobSearchingProcessId" -------------
	var jobSearchingProcessId string

	err = runtime.BindStyledParameterWithOptions("simple", "jobSearchingProcessId", chi.URLParam(r, "jobSearchingProcessId"), &jobSearchingProcessId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "jobSearchingProcessId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserJobSearchingProcessesJobSearchingProcessId(w, r, jobSearchingProcessId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchUserJobSearchingProcessesJobSearchingProcessId operation middleware
func (siw *ServerInterfaceWrapper) PatchUserJobSearchingProcessesJobSearchingProcessId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "jobSearchingProcessId" -------------
	var jobSearchingProcessId string

	err = runtime.BindStyledParameterWithOptions("simple", "jobSearchingProcessId", chi.URLParam(r, "jobSearchingProcessId"), &jobSearchingProcessId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "jobSearchingProcessId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchUserJobSearchingProcessesJobSearchingProcessId(w, r, jobSearchingProcessId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostUserVacancies operation middleware
func (siw *ServerInterfaceWrapper) PostUserVacancies(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostUserVacancies(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteUserVacanciesVacancyIdParam operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserVacanciesVacancyIdParam(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "vacancyIdParam" -------------
	var vacancyIdParam VacancyIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "vacancyIdParam", chi.URLParam(r, "vacancyIdParam"), &vacancyIdParam, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "vacancyIdParam", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUserVacanciesVacancyIdParam(w, r, vacancyIdParam)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserVacanciesVacancyIdParam operation middleware
func (siw *ServerInterfaceWrapper) GetUserVacanciesVacancyIdParam(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "vacancyIdParam" -------------
	var vacancyIdParam VacancyIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "vacancyIdParam", chi.URLParam(r, "vacancyIdParam"), &vacancyIdParam, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "vacancyIdParam", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserVacanciesVacancyIdParam(w, r, vacancyIdParam)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PatchUserVacanciesVacancyIdParam operation middleware
func (siw *ServerInterfaceWrapper) PatchUserVacanciesVacancyIdParam(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "vacancyIdParam" -------------
	var vacancyIdParam VacancyIdParam

	err = runtime.BindStyledParameterWithOptions("simple", "vacancyIdParam", chi.URLParam(r, "vacancyIdParam"), &vacancyIdParam, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "vacancyIdParam", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PatchUserVacanciesVacancyIdParam(w, r, vacancyIdParam)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/countries", wrapper.GetCountries)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/countries/{countryId}", wrapper.GetCountriesCountryId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/currencies", wrapper.GetCurrencies)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/currencies/{currencyId}", wrapper.GetCurrenciesCurrencyId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/Messangers", wrapper.GetMessangers)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/user/HRMAnagers/{HRManagerId}", wrapper.DeleteUserHRMAnagersHRManagerId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/HRMAnagers/{HRManagerId}", wrapper.GetUserHRMAnagersHRManagerId)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/user/HRMAnagers/{HRManagerId}", wrapper.PatchUserHRMAnagersHRManagerId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user/HRManagers", wrapper.PostUserHRManagers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/HRManagers/{HRManagerId}/contacts", wrapper.GetUserHRManagersHRManagerIdContacts)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user/HRManagers/{HRManagerId}/contacts", wrapper.PostUserHRManagersHRManagerIdContacts)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/user/HRManagers/{HRManagerId}/contacts/{contactId}", wrapper.DeleteUserHRManagersHRManagerIdContactsContactId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/HRManagers/{HRManagerId}/contacts/{contactId}", wrapper.GetUserHRManagersHRManagerIdContactsContactId)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/user/HRManagers/{HRManagerId}/contacts/{contactId}", wrapper.PatchUserHRManagersHRManagerIdContactsContactId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user/applicationStages", wrapper.PostUserApplicationStages)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/user/applicationStages/{applicationStageId}", wrapper.DeleteUserApplicationStagesApplicationStageId)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/user/applicationStages/{applicationStageId}", wrapper.PatchUserApplicationStagesApplicationStageId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user/employers", wrapper.PostUserEmployers)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/user/employers/{employerId}", wrapper.DeleteUserEmployersEmployerId)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/user/employers/{employerId}", wrapper.PatchUserEmployersEmployerId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/jobSearchingProcesses", wrapper.GetUserJobSearchingProcesses)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user/jobSearchingProcesses", wrapper.PostUserJobSearchingProcesses)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/user/jobSearchingProcesses/{jobSearchingProcessId}", wrapper.DeleteUserJobSearchingProcessesJobSearchingProcessId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/jobSearchingProcesses/{jobSearchingProcessId}", wrapper.GetUserJobSearchingProcessesJobSearchingProcessId)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/user/jobSearchingProcesses/{jobSearchingProcessId}", wrapper.PatchUserJobSearchingProcessesJobSearchingProcessId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user/vacancies", wrapper.PostUserVacancies)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/user/vacancies/{vacancyIdParam}", wrapper.DeleteUserVacanciesVacancyIdParam)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/vacancies/{vacancyIdParam}", wrapper.GetUserVacanciesVacancyIdParam)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/user/vacancies/{vacancyIdParam}", wrapper.PatchUserVacanciesVacancyIdParam)
	})

	return r
}
